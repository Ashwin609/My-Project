// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: keyvaluestore.proto
// Original file comments:
// Copyright 2018 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_keyvaluestore_2eproto__INCLUDED
#define GRPC_keyvaluestore_2eproto__INCLUDED

#include "keyvaluestore.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace kvstore {

// A simple key-value storage service
class KeyValueStore final {
 public:
  static constexpr char const* service_full_name() {
    return "kvstore.KeyValueStore";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Provides a value for each key request
    virtual ::grpc::Status GetValues(::grpc::ClientContext* context, const ::kvstore::Request& request, ::kvstore::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>> AsyncGetValues(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>>(AsyncGetValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>> PrepareAsyncGetValues(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>>(PrepareAsyncGetValuesRaw(context, request, cq));
    }
    virtual ::grpc::Status StorePair(::grpc::ClientContext* context, const ::kvstore::Request& request, ::kvstore::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>> AsyncStorePair(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>>(AsyncStorePairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>> PrepareAsyncStorePair(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>>(PrepareAsyncStorePairRaw(context, request, cq));
    }
    virtual ::grpc::Status DeletePair(::grpc::ClientContext* context, const ::kvstore::Request& request, ::kvstore::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>> AsyncDeletePair(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>>(AsyncDeletePairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>> PrepareAsyncDeletePair(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>>(PrepareAsyncDeletePairRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Provides a value for each key request
      virtual void GetValues(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetValues(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StorePair(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StorePair(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeletePair(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePair(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>* AsyncGetValuesRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>* PrepareAsyncGetValuesRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>* AsyncStorePairRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>* PrepareAsyncStorePairRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>* AsyncDeletePairRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::Response>* PrepareAsyncDeletePairRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetValues(::grpc::ClientContext* context, const ::kvstore::Request& request, ::kvstore::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::Response>> AsyncGetValues(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::Response>>(AsyncGetValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::Response>> PrepareAsyncGetValues(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::Response>>(PrepareAsyncGetValuesRaw(context, request, cq));
    }
    ::grpc::Status StorePair(::grpc::ClientContext* context, const ::kvstore::Request& request, ::kvstore::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::Response>> AsyncStorePair(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::Response>>(AsyncStorePairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::Response>> PrepareAsyncStorePair(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::Response>>(PrepareAsyncStorePairRaw(context, request, cq));
    }
    ::grpc::Status DeletePair(::grpc::ClientContext* context, const ::kvstore::Request& request, ::kvstore::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::Response>> AsyncDeletePair(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::Response>>(AsyncDeletePairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::Response>> PrepareAsyncDeletePair(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::Response>>(PrepareAsyncDeletePairRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetValues(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, std::function<void(::grpc::Status)>) override;
      void GetValues(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StorePair(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, std::function<void(::grpc::Status)>) override;
      void StorePair(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeletePair(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, std::function<void(::grpc::Status)>) override;
      void DeletePair(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::kvstore::Response>* AsyncGetValuesRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvstore::Response>* PrepareAsyncGetValuesRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvstore::Response>* AsyncStorePairRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvstore::Response>* PrepareAsyncStorePairRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvstore::Response>* AsyncDeletePairRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvstore::Response>* PrepareAsyncDeletePairRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetValues_;
    const ::grpc::internal::RpcMethod rpcmethod_StorePair_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePair_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Provides a value for each key request
    virtual ::grpc::Status GetValues(::grpc::ServerContext* context, const ::kvstore::Request* request, ::kvstore::Response* response);
    virtual ::grpc::Status StorePair(::grpc::ServerContext* context, const ::kvstore::Request* request, ::kvstore::Response* response);
    virtual ::grpc::Status DeletePair(::grpc::ServerContext* context, const ::kvstore::Request* request, ::kvstore::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetValues() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValues(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValues(::grpc::ServerContext* context, ::kvstore::Request* request, ::grpc::ServerAsyncResponseWriter< ::kvstore::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StorePair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StorePair() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StorePair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorePair(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStorePair(::grpc::ServerContext* context, ::kvstore::Request* request, ::grpc::ServerAsyncResponseWriter< ::kvstore::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePair() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeletePair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePair(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePair(::grpc::ServerContext* context, ::kvstore::Request* request, ::grpc::ServerAsyncResponseWriter< ::kvstore::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetValues<WithAsyncMethod_StorePair<WithAsyncMethod_DeletePair<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetValues() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::kvstore::Request, ::kvstore::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kvstore::Request* request, ::kvstore::Response* response) { return this->GetValues(context, request, response); }));}
    void SetMessageAllocatorFor_GetValues(
        ::grpc::MessageAllocator< ::kvstore::Request, ::kvstore::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kvstore::Request, ::kvstore::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValues(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetValues(
      ::grpc::CallbackServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StorePair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StorePair() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::kvstore::Request, ::kvstore::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kvstore::Request* request, ::kvstore::Response* response) { return this->StorePair(context, request, response); }));}
    void SetMessageAllocatorFor_StorePair(
        ::grpc::MessageAllocator< ::kvstore::Request, ::kvstore::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kvstore::Request, ::kvstore::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StorePair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorePair(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StorePair(
      ::grpc::CallbackServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeletePair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeletePair() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::kvstore::Request, ::kvstore::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kvstore::Request* request, ::kvstore::Response* response) { return this->DeletePair(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePair(
        ::grpc::MessageAllocator< ::kvstore::Request, ::kvstore::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kvstore::Request, ::kvstore::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeletePair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePair(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePair(
      ::grpc::CallbackServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetValues<WithCallbackMethod_StorePair<WithCallbackMethod_DeletePair<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetValues() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValues(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StorePair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StorePair() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StorePair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorePair(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePair() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeletePair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePair(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetValues() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValues(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StorePair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StorePair() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StorePair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorePair(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStorePair(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePair() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeletePair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePair(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePair(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetValues() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetValues(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValues(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetValues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StorePair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StorePair() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StorePair(context, request, response); }));
    }
    ~WithRawCallbackMethod_StorePair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorePair(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StorePair(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeletePair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeletePair() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePair(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeletePair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePair(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePair(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetValues() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kvstore::Request, ::kvstore::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kvstore::Request, ::kvstore::Response>* streamer) {
                       return this->StreamedGetValues(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetValues(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetValues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvstore::Request,::kvstore::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StorePair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StorePair() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kvstore::Request, ::kvstore::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kvstore::Request, ::kvstore::Response>* streamer) {
                       return this->StreamedStorePair(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StorePair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StorePair(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStorePair(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvstore::Request,::kvstore::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePair() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kvstore::Request, ::kvstore::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kvstore::Request, ::kvstore::Response>* streamer) {
                       return this->StreamedDeletePair(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePair(::grpc::ServerContext* /*context*/, const ::kvstore::Request* /*request*/, ::kvstore::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePair(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvstore::Request,::kvstore::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetValues<WithStreamedUnaryMethod_StorePair<WithStreamedUnaryMethod_DeletePair<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetValues<WithStreamedUnaryMethod_StorePair<WithStreamedUnaryMethod_DeletePair<Service > > > StreamedService;
};

}  // namespace kvstore


#endif  // GRPC_keyvaluestore_2eproto__INCLUDED
