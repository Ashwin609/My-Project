// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: keyvaluestore.proto

#include "keyvaluestore.pb.h"
#include "keyvaluestore.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace kvstore {

static const char* KeyValueStore_method_names[] = {
  "/kvstore.KeyValueStore/GetValues",
  "/kvstore.KeyValueStore/StorePair",
  "/kvstore.KeyValueStore/DeletePair",
};

std::unique_ptr< KeyValueStore::Stub> KeyValueStore::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KeyValueStore::Stub> stub(new KeyValueStore::Stub(channel, options));
  return stub;
}

KeyValueStore::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetValues_(KeyValueStore_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StorePair_(KeyValueStore_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePair_(KeyValueStore_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KeyValueStore::Stub::GetValues(::grpc::ClientContext* context, const ::kvstore::Request& request, ::kvstore::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kvstore::Request, ::kvstore::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetValues_, context, request, response);
}

void KeyValueStore::Stub::async::GetValues(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kvstore::Request, ::kvstore::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetValues_, context, request, response, std::move(f));
}

void KeyValueStore::Stub::async::GetValues(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetValues_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvstore::Response>* KeyValueStore::Stub::PrepareAsyncGetValuesRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kvstore::Response, ::kvstore::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetValues_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kvstore::Response>* KeyValueStore::Stub::AsyncGetValuesRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetValuesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KeyValueStore::Stub::StorePair(::grpc::ClientContext* context, const ::kvstore::Request& request, ::kvstore::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kvstore::Request, ::kvstore::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StorePair_, context, request, response);
}

void KeyValueStore::Stub::async::StorePair(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kvstore::Request, ::kvstore::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StorePair_, context, request, response, std::move(f));
}

void KeyValueStore::Stub::async::StorePair(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StorePair_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvstore::Response>* KeyValueStore::Stub::PrepareAsyncStorePairRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kvstore::Response, ::kvstore::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StorePair_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kvstore::Response>* KeyValueStore::Stub::AsyncStorePairRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStorePairRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KeyValueStore::Stub::DeletePair(::grpc::ClientContext* context, const ::kvstore::Request& request, ::kvstore::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kvstore::Request, ::kvstore::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePair_, context, request, response);
}

void KeyValueStore::Stub::async::DeletePair(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kvstore::Request, ::kvstore::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePair_, context, request, response, std::move(f));
}

void KeyValueStore::Stub::async::DeletePair(::grpc::ClientContext* context, const ::kvstore::Request* request, ::kvstore::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePair_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvstore::Response>* KeyValueStore::Stub::PrepareAsyncDeletePairRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kvstore::Response, ::kvstore::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePair_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kvstore::Response>* KeyValueStore::Stub::AsyncDeletePairRaw(::grpc::ClientContext* context, const ::kvstore::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePairRaw(context, request, cq);
  result->StartCall();
  return result;
}

KeyValueStore::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyValueStore_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyValueStore::Service, ::kvstore::Request, ::kvstore::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KeyValueStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kvstore::Request* req,
             ::kvstore::Response* resp) {
               return service->GetValues(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyValueStore_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyValueStore::Service, ::kvstore::Request, ::kvstore::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KeyValueStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kvstore::Request* req,
             ::kvstore::Response* resp) {
               return service->StorePair(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyValueStore_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyValueStore::Service, ::kvstore::Request, ::kvstore::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KeyValueStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kvstore::Request* req,
             ::kvstore::Response* resp) {
               return service->DeletePair(ctx, req, resp);
             }, this)));
}

KeyValueStore::Service::~Service() {
}

::grpc::Status KeyValueStore::Service::GetValues(::grpc::ServerContext* context, const ::kvstore::Request* request, ::kvstore::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyValueStore::Service::StorePair(::grpc::ServerContext* context, const ::kvstore::Request* request, ::kvstore::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyValueStore::Service::DeletePair(::grpc::ServerContext* context, const ::kvstore::Request* request, ::kvstore::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kvstore

